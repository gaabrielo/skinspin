// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean  @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  skins ProductSkin[] // Relacionamento com as skins
}

model Skin {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  weapon      String
  slug        String  @unique(map: "skin_slug_idx")
  description String
  image       String
  rarity      String  @default("common")
  stattrak    Boolean @default(false)

  products ProductSkin[] // Relacionamento com os produtos
}

model ProductSkin {
  productId  String  @db.Uuid
  skinId     String  @db.Uuid
  dropChance Decimal @default(0) @db.Decimal(5, 2)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  skin    Skin    @relation(fields: [skinId], references: [id], onDelete: Cascade)

  @@id([productId, skinId]) // Chave prim√°ria composta
}
